---
import Layout from '../layouts/Layout.astro';
---
<script>
	import axios from 'axios';
	import { v4 as uuidv4 } from 'uuid';
	import { navigate } from 'astro/virtual-modules/transitions-router.js';
	let imageSrc = '';

	const uploadImage = async (image: string, slogan: string, blob: Blob) => {
		const key = uuidv4() + '.png'; 
		console.log(key);
		const baseUrl = "https://r2-connect-worker.stewart-schrieffer71.workers.dev/";
		const workerUrl = `${baseUrl}${key}?s=${slogan}`; 
		const authSecretKey = import.meta.env.PUBLIC_AUTH_SECRET_KEY; 

		if (!authSecretKey) {
			console.error('Authorization secret key not found.');
			return null;
		}

		const formData = new FormData();
		const reader = new FileReader();
		console.log(blob);
		reader.readAsText(blob);
		// const blob = new Blob(image, {type: 'image/png'});
		formData.append('image', blob, key);

		try {
		const response = await fetch(workerUrl, {
		      method: 'PUT',
		      body: blob,
		      headers: {
			"Content-Type": "image/png",
			"X-Custom-Auth-Key": `${authSecretKey}`,
		      },
		    });

		if (!response.ok) {
			console.error('Failed to upload image:', response.statusText);
			return null;
		}

		const imageUrl = baseUrl + await response.text();
		console.warn(imageUrl);
		return imageUrl;
		} catch (error) {
			console.error('Error uploading image:', error);
			return null;
		}

	}

	const navigateToFinal = async (image: string, blob: Blob) => {
		const slogan = new URLSearchParams(window.location.search).get('prompt') as string;
		// Need to upload image before we leave this page, because we will fetch image next page?
		console.log('beginning to upload image');
		const imageR2Url = encodeURIComponent(await uploadImage(image, slogan, blob) as string); 
		const encodedContent = encodeURIComponent(slogan);
		const url = `/final?pun=${encodedContent}&image=${imageR2Url}`;
		console.log('past waiting to finish uploading image');
		console.log(url)	;
		setTimeout(() => {
			navigate(url);
		}, 1000)
	}
	const fetchSpecificImage = async (model: any) => {
		const refreshButton = document.querySelector('[data-refresh-' + model + ']');
		refreshButton?.addEventListener('click', (event) => {
			event.stopPropagation(); //refresh should only refresh, not navigate to final
			fetchSpecificImage(model)
		});
		refreshButton?.classList.add("hidden");
		const pun = new URLSearchParams(window.location.search).get('prompt');
		const business = new URLSearchParams(window.location.search).get('business');
		try {
			const images = document.querySelectorAll('[data-image-' + model + ']');
			images.forEach((image) => {
				image.setAttribute('src', '');
			});
			const response = await axios.get('https://worker-billowing-limit-574d.stewart-schrieffer71.workers.dev/?p=' + pun + '&m=' + model + '&b=' + business, {
				 responseType: 'blob',
			});
			const blob = new Blob([response.data], { type: 'image/png' });
			const reader = new FileReader();

		reader.onload = () => {
			imageSrc = reader.result as string;
			const images = document.querySelectorAll('[data-image-' + model + ']');
			images.forEach((image) => {
				image.setAttribute('src', imageSrc);
				image.classList.remove('invisible');
			});
			const resultContainer = document.querySelector('[data-container-' + model + ']');
			resultContainer?.addEventListener("click", () => navigateToFinal(imageSrc, blob));
			resultContainer?.classList.add("shadow-[0_0_2px_#F4BC7C,inset_0_0_2px_#F4BC7C,0_0_5px_#7A460B,0_0_15px_#7A460B,0_0_30px_#7A460B]");
			refreshButton?.classList.remove("hidden");
		};
		reader.readAsDataURL(blob);

		} catch (error: any) {
			console.error('Error fetching image:', error);
			const errorMessages = document.querySelectorAll('[data-error-message]');
			errorMessages.forEach((errorMessage) => {
				errorMessage.setAttribute('data-content', error.code);
			});
			refreshButton?.classList.remove("hidden");
		}
	}
	const setup = async () => {
		const myVal = document.querySelector('[data-your-prompt]') as HTMLElement;
		const pun = new URLSearchParams(window.location.search).get('prompt');
		myVal.innerHTML = pun as string;
		const modelList = ["sdbase", "dreamshaper", "sdlightning"]

		modelList.forEach(async (model) =>{
			fetchSpecificImage(model);
		});
	};
	setup();
	document.addEventListener('astro:after-swap', () => {
		if (window.location.href.indexOf('/image') > -1) {
			setup();
		}
	});


</script>

<Layout title="Ai Ad Generator">
	<div transition:name="title">
		<h1 class="text-cforange-600"><a href="/">Ai Ad Generator</a></h1>
		<h3 class="text-cforange-400"><i>Powered by <a class="underline" href="https://ai.cloudflare.com/">Cloudflare</a></i></h3>
	</div>
	<p class="mb-8 text-center text-cforange-200">
		Let's create some images based on your slogan. Click your favorite.
	</p>
	<p data-your-prompt class="mb-8 text-center italic text-md text-cforange-600">
	</p>
	<div class="flex flex-wrap items-start justify-center items-center gap-6">
		<div data-container-dreamshaper class="rounded-xl cursor-pointer w-full md:w-1/4 flex flex-col justify-center items-center transition ease-in-out hover:scale-110 hover:shadow-cforange-200 duration-3000 self-stretch">
			<h2 class="min-h-20 text-3xl text-center my-2 text-cforange-600">Dreamshaper</h2>
			<img data-image-dreamshaper class="invisible w-full h-auto"/>
			<button data-refresh-dreamshaper class="mt-4 max-w-16 rounded-xl mb-8 bg-cforange-50 text-black font-bold py-2 px-4 rounded shadow hover:bg-cforange-400 focus:outline-none focus:ring-2 focus:ring-gray-500">
				<img class="h-auto w-auto hover:animate-spin" src="/refresh-svgrepo-com.svg"></img>
			</button>
		</div>
		<div data-container-sdlightning class="rounded-xl cursor-pointer w-full md:w-1/4 flex flex-col justify-center items-center transition ease-in-out hover:scale-110 hover:shadow-cforange-200 duration-3000 self-stretch">
			<h2 class="min-h-20 text-3xl text-center my-2 text-cforange-600">Stable Diffusion Lightning</h2>
			<img data-image-sdlightning class="invisible w-full h-auto"/>
			<button data-refresh-sdlightning class="mt-4 max-w-16 rounded-xl mb-8 bg-cforange-50 text-black font-bold py-2 px-4 rounded shadow hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500">
				<img class="h-auto w-auto hover:animate-spin" src="/refresh-svgrepo-com.svg"></img>
			</button>
		</div>
		<div data-container-sdbase class="rounded-xl cursor-pointer w-full md:w-1/4 flex flex-col justify-center items-center transition ease-in-out hover:scale-110 hover:shadow-cforange-200 duration-3000 self-stretch">
			<h2 class="min-h-20 text-3xl text-center my-2 text-cforange-600">Stable Diffustion Base</h2>
			<img data-image-sdbase class="invisible w-full h-auto"/>
			<button data-refresh-sdbase class="mt-4 max-w-16 rounded-xl mb-8 bg-cforange-50 text-black font-bold py-2 px-4 rounded shadow hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500">
				<img class="h-auto w-auto hover:animate-spin" src="/refresh-svgrepo-com.svg"></img>
			</button>
		</div>
	</div>
</Layout>

<style>
	textarea {
		color: black;
	}
	select {
		color: black;
	}
	button {
		border-width: 1px;
		border-style: solid;
		border-radius: 15px;
	}
	p::after {
		content: attr(data-content);
	}
	h1 {
		font-size: 4rem;
		font-weight: 700;
		line-height: 1;
		text-align: center;
	}
	h3 {
		line-height: 1;
		text-align: center;
		margin-bottom: 1em;
	}	
</style>
