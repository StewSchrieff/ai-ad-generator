---
import Layout from '../layouts/Layout.astro';
---
<script>
import axios from 'axios';
// @ts-ignore
import { PNG } from 'pngjs/browser';
import { Buffer } from 'buffer';
interface Color {
    r: number;
    g: number;
    b: number;
}
let slogan = "";

async function findMostCommonColorInBottom20Percent(url: string): Promise<string | null> {
	try {

	// Fetch the PNG image data from the remote URL
	const response = await axios.get<ArrayBuffer>(url, {
		responseType: 'arraybuffer'
	});

	
	console.dir(response.headers);
	// @ts-ignore
	slogan = response.headers.get('slogan');

	// Decode the PNG image data
	const png = PNG.sync.read(Buffer.from(response.data));

	// Calculate the starting row for the bottom 20% of the image
	const bottomStartRow = Math.floor(png.height * 0.8);

	// Object to store color frequencies
	const colorMap = new Map<string, number>();

	// Iterate through each pixel in the bottom 20% of the image
	for (let i = 0; i < png.width; i++) {
		for (let j = bottomStartRow; j < png.height; j++) {
			const idx = (png.width * j + i) << 2; // Calculate index for current pixel

			// Get color components
			const r = png.data[idx];
			const g = png.data[idx + 1];
			const b = png.data[idx + 2];
			 // Filter out colors that are too close to pure black or white
			if (
				(r < 20 || g < 20 || b < 20) || // Exclude colors too dark (close to black)
				(r > 240 && g > 240 && b > 240) // Exclude colors too light (close to white)
				) {
				continue; // Skip this color
			}

			// Generate a key for the color (using string format)
			const colorKey = `${r},${g},${b}`;

			// Increment color frequency in the map
			if (colorMap.has(colorKey)) {
			    colorMap.set(colorKey, colorMap.get(colorKey)! + 1);
			} else {
			    colorMap.set(colorKey, 1);
			}
		    }
		}

		// Find the most frequent color
		let maxFrequency = 0;
		let mostCommonColor: Color | null = null;

		for (const [colorKey, frequency] of colorMap) {
			if (frequency > maxFrequency) {
				maxFrequency = frequency;
				const [r, g, b] = colorKey.split(',').map(Number);
				mostCommonColor = { r, g, b };
			}
		}

		return `rgb(${mostCommonColor?.r || 0}, ${mostCommonColor?.g || 0}, ${mostCommonColor?.b || 0})`;
	} catch (error) {
		console.error('Error fetching or processing the image:', error);
		return null;
	}
}

	const setup = async () => {
		const image = document.querySelector('[data-image]') as HTMLElement;
		const banner = document.querySelector('[data-banner]') as HTMLElement;
		const imageSrc = new URLSearchParams(window.location.search).get('image') as string;
		image.setAttribute("src", imageSrc);
		findMostCommonColorInBottom20Percent(imageSrc).then((res: string | null) => {
			banner.innerHTML = slogan;
			banner.style.backgroundColor = res as string; 
		});
		console.warn(imageSrc);
	};
	setup();


</script>

<Layout title="Ai Ad Generator">
	<div transition:name="title">
		<h1 class="text-cforange-600"><a href="/">Ai Ad Generator</a></h1>
		<h3 class="text-cforange-400"><i>Powered by <a class="underline" href="https://ai.cloudflare.com/">Cloudflare</a></i></h3>
	</div>
	<p class="mb-8 text-center text-cforange-200">
		Here's your final Ad!
	</p>
	<div class = "overflow-hidden relative">
		<div class="overlay"></div>
		<div class="relative">
			<img data-image class="w-full h-auto"/>
			<div data-banner class="banner absolute inset-x-0 bottom-0 bg-black bg-opacity-50 text-white p-4"><div>
		</div>
	</div>


<style>
	textarea {
		color: black;
	}
	select {
		color: black;
	}
	.banner {
		z-index: 10;
		mask-image: linear-gradient(to top, black 70%, transparent 100%);
		height: 20%;
		content: attr(data-content);
	}
	button {
		border-width: 1px;
		border-style: solid;
		border-radius: 15px;
	}
	p::after {
		content: attr(data-content);
	}
	h1 {
		font-size: 4rem;
		font-weight: 700;
		line-height: 1;
		text-align: center;
	}
	h3 {
		line-height: 1;
		text-align: center;
		margin-bottom: 1em;
	}	
</style>
